{"version":3,"sources":["users-test.js"],"names":["beforeEach","t","srv","context","url","user","getUser","options","method","uri","json","body","name","username","password","email","resolveWithFUllRespoonse","response","is","statusCode","deepEqual","todo"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AAJA;AACkC;AACK;;;AAIvC;AACA,cAAKA,UAAL;AAAA,+BAAgB,WAAMC,CAAN,EAAW;AACzB;AACA,QAAIC,MAAM,qCAAV;AACA;AACAD,MAAEE,OAAF,CAAUC,GAAV,GAAgB,MAAM,0BAAOF,GAAP,CAAtB;AACD,GALD;;AAAA;AAAA;AAAA;AAAA;;AAOA,mBAAK,QAAL;AAAA,gCAAe,WAAMD,CAAN,EAAW;AACxB,QAAII,OAAO,mBAASC,OAAT,EAAX;AACA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,QAAIG,UAAU;AACZC,cAAQ,MADI;AAEZC,WAAKL,GAFO;AAGZM,YAAM,IAHM;AAIZC,YAAM;AACJC,cAAMP,KAAKO,IADP;AAEJC,kBAAUR,KAAKQ,QAFX;AAGJC,kBAAUT,KAAKS,QAHX;AAIJC,eAAOV,KAAKU;AAJR,OAJM;AAUZC,gCAA0B;AAVd,KAAd;AAYA,QAAIC,WAAW,MAAM,8BAAQV,OAAR,CAArB;;AAEA,WAAOF,KAAKU,KAAZ;AACA,WAAOV,KAAKS,QAAZ;;AAEAb,MAAEiB,EAAF,CAAKD,SAASE,UAAd,EAA0B,GAA1B;AACAlB,MAAEmB,SAAF,CAAYH,SAASN,IAArB,EAA2BN,IAA3B;AACD,GAvBD;;AAAA;AAAA;AAAA;AAAA;;AAyBA,cAAKgB,IAAL,CAAU,gBAAV","file":"users-test.js","sourcesContent":["'use strict'\r\n\r\nimport test from 'ava'\r\nimport micro from 'micro'\r\n//  import uuid from 'uuid-base62'\r\nimport listen from 'test-listen'  //  Testing microservices with micro\r\nimport request from 'request-promise'  //  http request using promises\r\nimport users from '../users.js'\r\nimport fixtures from './fixtures'\r\n\r\n//  launches microservice for each test\r\ntest.beforeEach(async t => {\r\n  //  micro launches the micro server\r\n  let srv = micro(users)\r\n  //  listen return url:port from server executed by micro-> line 13\r\n  t.context.url = await listen(srv)\r\n})\r\n\r\ntest('POST /', async t => {\r\n  let user = fixtures.getUser()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    json: true,\r\n    body: {\r\n      name: user.name,\r\n      username: user.username,\r\n      password: user.password,\r\n      email: user.email\r\n    },\r\n    resolveWithFUllRespoonse: true\r\n  }\r\n  let response = await request(options)\r\n\r\n  delete user.email\r\n  delete user.password\r\n\r\n  t.is(response.statusCode, 201)\r\n  t.deepEqual(response.body, user)\r\n})\r\n\r\ntest.todo('GET /:username')\r\n"]}