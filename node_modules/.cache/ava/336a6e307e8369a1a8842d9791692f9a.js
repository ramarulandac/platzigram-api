'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _micro = require('micro');

var _micro2 = _interopRequireDefault(_micro);

var _testListen = require('test-listen');

var _testListen2 = _interopRequireDefault(_testListen);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _pictures = require('../pictures.js');

var _pictures2 = _interopRequireDefault(_pictures);

var _fixtures = require('./fixtures');

var _fixtures2 = _interopRequireDefault(_fixtures);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _avaThrowsHelperStart(t, assertion, file, line) {
  if (t._throwsArgStart) {
    t._throwsArgStart(assertion, file, line);
  }
}

function _avaThrowsHelperEnd(t, arg) {
  if (t._throwsArgEnd) {
    t._throwsArgEnd();
  }

  return arg;
}
//  import uuid from 'uuid-base62'
//  Testing microservices with micro
//  http request using promises


//  launches microservice for each test
_ava2.default.beforeEach((() => {
  var _ref = _asyncToGenerator(function* (t) {
    //  micro launches the micro server
    let srv = (0, _micro2.default)(_pictures2.default);
    //  listen return url:port from server executed by micro-> line 13
    t.context.url = yield (0, _testListen2.default)(srv);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());

//  test to to!!
(0, _ava2.default)('no token POST /', (() => {
  var _ref2 = _asyncToGenerator(function* (t) {
    let image = _fixtures2.default.getImage();
    let url = t.context.url;

    let options = {
      method: 'POST',
      uri: url,
      json: true,
      body: {
        description: image.description,
        src: image.src,
        userId: image.userId
      },
      resolveWithFullResponse: true //  1 - option to obtain the whole object response in order to test that the http code response is 201
      //  2 - by default request promise just returns the body of the response.

    };t.throws((_avaThrowsHelperStart(t, 'throws', 'C:/Users/Renton/Documents/Javascript Projects/platzigram-api/test/pictures-test.js', 36), _avaThrowsHelperEnd(t, (0, _requestPromise2.default)(options))), /invalid token/);
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
})());

(0, _ava2.default)('POST /:id/like', (() => {
  var _ref3 = _asyncToGenerator(function* (t) {
    let image = _fixtures2.default.getImage();
    let url = t.context.url;

    let options = {
      method: 'POST',
      uri: `${url}/${image.id}/like`,
      json: true
    };

    let body = yield (0, _requestPromise2.default)(options);
    let imageNew = JSON.parse(JSON.stringify(image));
    imageNew.liked = true;
    imageNew.likes = 1;

    t.deepEqual(body, imageNew);
  });

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
})());

(0, _ava2.default)('GET /list', (() => {
  var _ref4 = _asyncToGenerator(function* (t) {
    let images = _fixtures2.default.getImages();
    let url = t.context.url;

    let options = {
      method: 'GET',
      uri: `${url}/list`,
      json: true
    };

    let body = yield (0, _requestPromise2.default)(options);
    t.deepEqual(body, images);
  });

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
})());

//  testing micro: 'GET /_id' --> ruta para obtener imagen por id
(0, _ava2.default)('GET /:id', (() => {
  var _ref5 = _asyncToGenerator(function* (t) {
    let image = _fixtures2.default.getImage();

    let url = t.context.url;
    //  execute http request
    let body = yield (0, _requestPromise2.default)({ uri: `${url}/${image.publicId}`, json: true });
    t.deepEqual(body, image);
  });

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
})());

(0, _ava2.default)('GET /tag/:tag', (() => {
  var _ref6 = _asyncToGenerator(function* (t) {
    let images = _fixtures2.default.getImagesByTag();
    let url = t.context.url;

    let options = {
      method: 'GET',
      uri: `${url}/tag/awesome`,
      json: true
    };

    let body = yield (0, _requestPromise2.default)(options);
    t.deepEqual(body, images);
  });

  return function (_x6) {
    return _ref6.apply(this, arguments);
  };
})());
//# sourceMappingURL=..\node_modules\.cache\ava\336a6e307e8369a1a8842d9791692f9a.js.map