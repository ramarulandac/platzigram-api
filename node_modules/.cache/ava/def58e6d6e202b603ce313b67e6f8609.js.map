{"version":3,"sources":["pictures-test.js"],"names":["beforeEach","t","srv","context","url","image","getImage","options","method","uri","json","body","description","src","userId","resolveWithFullResponse","result","throws","token","signToken","secret","headers","response","is","statusCode","deepEqual","id","imageNew","JSON","parse","stringify","liked","likes","images","getImages","publicId","getImagesByTag"],"mappings":"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","file":"pictures-test.js","sourcesContent":["'use strict'\r\n\r\nimport test from 'ava'\r\nimport micro from 'micro'\r\n//  import uuid from 'uuid-base62'\r\nimport listen from 'test-listen'  //  Testing microservices with micro\r\nimport request from 'request-promise'  //  http request using promises\r\nimport pictures from '../pictures.js'\r\nimport fixtures from './fixtures'\r\nimport utils from '../lib/utils'\r\nimport config from '../config'\r\n\r\n//  launches microservice for each test\r\ntest.beforeEach(async t => {\r\n  //  micro launches the micro server\r\n  let srv = micro(pictures)\r\n  //  listen return url:port from server executed by micro-> line 13\r\n  t.context.url = await listen(srv)\r\n})\r\n\r\n  //  No token post\r\ntest('no token POST /', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    json: true,\r\n    body: {\r\n      description: image.description,\r\n      src: image.src,\r\n      userId: image.userId\r\n    },\r\n    resolveWithFullResponse: true  //  1 - option to obtain the whole object response in order to test that the http code response is 201\r\n  }  //  2 - by default request promise just returns the body of the response.\r\n  let result = await request(options)\r\n  t.throws(result, /invalid token/)\r\n})\r\n//  Secure post\r\ntest('secure POST /', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n  let token = await utils.signToken({ userId: image.userId }, config.secret)\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    json: true,\r\n    body: {\r\n      description: image.description,\r\n      src: image.src,\r\n      userId: image.userId\r\n    },\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    resolveWithFullResponse: true  //  1 - option to obtain the whole object response in order to test that the http code response is 201\r\n  }  //  2 - by default request promise just returns the body of the response.\r\n\r\n  let response = await request(options)\r\n  t.is(response.statusCode, 201)\r\n  t.deepEqual(response.body, image)\r\n})\r\n\r\ntest('POST /:id/like', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: `${url}/${image.id}/like`,\r\n    json: true\r\n  }\r\n\r\n  let body = await request(options)\r\n  let imageNew = JSON.parse(JSON.stringify(image))\r\n  imageNew.liked = true\r\n  imageNew.likes = 1\r\n\r\n  t.deepEqual(body, imageNew)\r\n})\r\n\r\ntest('GET /list', async t => {\r\n  let images = fixtures.getImages()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'GET',\r\n    uri: `${url}/list`,\r\n    json: true\r\n  }\r\n\r\n  let body = await request(options)\r\n  t.deepEqual(body, images)\r\n})\r\n\r\n//  testing micro: 'GET /_id' --> ruta para obtener imagen por id\r\ntest('GET /:id', async t => {\r\n  let image = fixtures.getImage()\r\n\r\n  let url = t.context.url\r\n  //  execute http request\r\n  let body = await request({uri: `${url}/${image.publicId}`, json: true})\r\n  t.deepEqual(body, image)\r\n})\r\n\r\ntest('GET /tag/:tag', async t => {\r\n  let images = fixtures.getImagesByTag()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'GET',\r\n    uri: `${url}/tag/awesome`,\r\n    json: true\r\n  }\r\n\r\n  let body = await request(options)\r\n  t.deepEqual(body, images)\r\n})\r\n"]}