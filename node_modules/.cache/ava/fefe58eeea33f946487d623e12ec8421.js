'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _micro = require('micro');

var _micro2 = _interopRequireDefault(_micro);

var _testListen = require('test-listen');

var _testListen2 = _interopRequireDefault(_testListen);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _auth = require('../auth.js');

var _auth2 = _interopRequireDefault(_auth);

var _fixtures = require('./fixtures');

var _fixtures2 = _interopRequireDefault(_fixtures);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _utils = require('../lib/utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
//  import uuid from 'uuid-base62'
//  Testing microservices with micro
//  http request using promises


//  launches microservice for each test
_ava2.default.beforeEach((() => {
  var _ref = _asyncToGenerator(function* (t) {
    //  micro launches the micro server
    let srv = (0, _micro2.default)(_auth2.default);
    //  listen return url:port from server executed by micro-> line 13
    t.context.url = yield (0, _testListen2.default)(srv);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());
//  Test Post - autentication
(0, _ava2.default)('success POST', (() => {
  var _ref2 = _asyncToGenerator(function* (t) {
    let user = _fixtures2.default.getUser();
    let url = t.context.url;
    let options = {
      method: 'POST',
      uri: url,
      body: {
        username: user.username,
        password: user.password
      },
      json: true
    };

    let token = yield (0, _requestPromise2.default)(options);
    let decoded = yield _utils2.default.verifyToken(token, _config2.default.secret);

    t.is(decoded.username, user.username);
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
})());
//# sourceMappingURL=..\node_modules\.cache\ava\fefe58eeea33f946487d623e12ec8421.js.map