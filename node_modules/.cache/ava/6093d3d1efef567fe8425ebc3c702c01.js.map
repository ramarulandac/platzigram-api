{"version":3,"sources":["pictures-test.js"],"names":["beforeEach","t","srv","context","url","image","getImage","body","uri","publicId","json","deepEqual","options","method","description","src","userId","resolveWithFullResponse","response","is","statusCode","id","imageNew","JSON","parse","stringify","liked","likes","images","getImages"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AAJA;AACkC;AACK;;;AAIvC;AACA,cAAKA,UAAL;AAAA,+BAAgB,WAAMC,CAAN,EAAW;AACzB;AACA,QAAIC,MAAM,wCAAV;AACA;AACAD,MAAEE,OAAF,CAAUC,GAAV,GAAgB,MAAM,0BAAOF,GAAP,CAAtB;AACD,GALD;;AAAA;AAAA;AAAA;AAAA;;AAOE;AACF,mBAAK,UAAL;AAAA,gCAAiB,WAAMD,CAAN,EAAW;AAC1B,QAAII,QAAQ,mBAASC,QAAT,EAAZ;;AAEA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;AACA;AACA,QAAIG,OAAO,MAAM,8BAAQ,EAACC,KAAM,GAAEJ,GAAI,IAAGC,MAAMI,QAAS,EAA/B,EAAkCC,MAAM,IAAxC,EAAR,CAAjB;AACAT,MAAEU,SAAF,CAAYJ,IAAZ,EAAkBF,KAAlB;AACD,GAPD;;AAAA;AAAA;AAAA;AAAA;;AASE;AACF,mBAAK,QAAL;AAAA,gCAAe,WAAMJ,CAAN,EAAW;AACxB,QAAII,QAAQ,mBAASC,QAAT,EAAZ;AACA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,QAAIQ,UAAU;AACZC,cAAQ,MADI;AAEZL,WAAKJ,GAFO;AAGZM,YAAM,IAHM;AAIZH,YAAM;AACJO,qBAAaT,MAAMS,WADf;AAEJC,aAAKV,MAAMU,GAFP;AAGJC,gBAAQX,MAAMW;AAHV,OAJM;AASZC,+BAAyB,IATb,CASmB;AAC9B;;AAVW,KAAd,CAYA,IAAIC,WAAW,MAAM,8BAAQN,OAAR,CAArB;;AAEAX,MAAEkB,EAAF,CAAKD,SAASE,UAAd,EAA0B,GAA1B;AACAnB,MAAEU,SAAF,CAAYO,SAASX,IAArB,EAA2BF,KAA3B;AACD,GApBD;;AAAA;AAAA;AAAA;AAAA;;AAsBA,mBAAK,gBAAL;AAAA,gCAAuB,WAAMJ,CAAN,EAAW;AAChC,QAAII,QAAQ,mBAASC,QAAT,EAAZ;AACA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,QAAIQ,UAAU;AACZC,cAAQ,MADI;AAEZL,WAAM,GAAEJ,GAAI,IAAGC,MAAMgB,EAAG,OAFZ;AAGZX,YAAM;AAHM,KAAd;;AAMA,QAAIH,OAAO,MAAM,8BAAQK,OAAR,CAAjB;AACA,QAAIU,WAAWC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAepB,KAAf,CAAX,CAAf;AACAiB,aAASI,KAAT,GAAiB,IAAjB;AACAJ,aAASK,KAAT,GAAiB,CAAjB;;AAEA1B,MAAEU,SAAF,CAAYJ,IAAZ,EAAkBe,QAAlB;AACD,GAhBD;;AAAA;AAAA;AAAA;AAAA;;AAkBA,mBAAK,WAAL;AAAA,gCAAkB,WAAMrB,CAAN,EAAW;AAC3B,QAAI2B,SAAS,mBAASC,SAAT,EAAb;AACA,QAAIzB,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,QAAIQ,UAAU;AACZC,cAAQ,MADI;AAEZL,WAAM,GAAEJ,GAAI,OAFA;AAGZM,YAAM;AAHM,KAAd;;AAMA,QAAIH,OAAO,MAAM,8BAAQK,OAAR,CAAjB;AACAX,MAAEU,SAAF,CAAYJ,IAAZ,EAAkBqB,MAAlB;AACD,GAZD;;AAAA;AAAA;AAAA;AAAA","file":"pictures-test.js","sourcesContent":["'use strict'\r\n\r\nimport test from 'ava'\r\nimport micro from 'micro'\r\n//  import uuid from 'uuid-base62'\r\nimport listen from 'test-listen'  //  Testing microservices with micro\r\nimport request from 'request-promise'  //  http request using promises\r\nimport pictures from '../pictures.js'\r\nimport fixtures from './fixtures'\r\n\r\n//  launches microservice for each test\r\ntest.beforeEach(async t => {\r\n  //  micro launches the server\r\n  let srv = micro(pictures)\r\n  //  listen return url:port from server executed by micro-> line 13\r\n  t.context.url = await listen(srv)\r\n})\r\n\r\n  //  testing micro: 'GET /_id' --> ruta para obtener imagen por id\r\ntest('GET /:id', async t => {\r\n  let image = fixtures.getImage()\r\n\r\n  let url = t.context.url\r\n  //  execute http request\r\n  let body = await request({uri: `${url}/${image.publicId}`, json: true})\r\n  t.deepEqual(body, image)\r\n})\r\n\r\n  //  test to to!!\r\ntest('POST /', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    json: true,\r\n    body: {\r\n      description: image.description,\r\n      src: image.src,\r\n      userId: image.userId\r\n    },\r\n    resolveWithFullResponse: true  //  1 - option to obtain the whole object response in order to test that the http code response is 201\r\n  }  //  2 - by default request promise just returns the body of the response.\r\n\r\n  let response = await request(options)\r\n\r\n  t.is(response.statusCode, 201)\r\n  t.deepEqual(response.body, image)\r\n})\r\n\r\ntest('POST /:id/like', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: `${url}/${image.id}/like`,\r\n    json: true\r\n  }\r\n\r\n  let body = await request(options)\r\n  let imageNew = JSON.parse(JSON.stringify(image))\r\n  imageNew.liked = true\r\n  imageNew.likes = 1\r\n\r\n  t.deepEqual(body, imageNew)\r\n})\r\n\r\ntest('GET /list', async t => {\r\n  let images = fixtures.getImages()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: `${url}/list`,\r\n    json: true\r\n  }\r\n\r\n  let body = await request(options)\r\n  t.deepEqual(body, images)\r\n})\r\n"]}