{"version":3,"sources":["pictures-test.js"],"names":["t","image","getImage","srv","url","body","uri","publicId","json","deepEqual","todo"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AAJA;AACkC;AACK;;;AAIrC;AACF,mBAAK,UAAL;AAAA,+BAAiB,WAAMA,CAAN,EAAW;AAC1B,QAAIC,QAAQ,mBAASC,QAAT,EAAZ;AACA;AACA,QAAIC,MAAM,wCAAV;AACA;AACA,QAAIC,MAAM,MAAM,0BAAOD,GAAP,CAAhB;AACA;AACA,QAAIE,OAAO,MAAM,8BAAQ,EAACC,KAAM,GAAEF,GAAI,IAAGH,MAAMM,QAAS,EAA/B,EAAkCC,MAAM,IAAxC,EAAR,CAAjB;AACAR,MAAES,SAAF,CAAYJ,IAAZ,EAAkBJ,KAAlB;AACD,GATD;;AAAA;AAAA;AAAA;AAAA;;AAWE;AACF,cAAKS,IAAL,CAAU,QAAV;AACA,cAAKA,IAAL,CAAU,gBAAV","file":"pictures-test.js","sourcesContent":["'use strict'\r\n\r\nimport test from 'ava'\r\nimport micro from 'micro'\r\n//  import uuid from 'uuid-base62'\r\nimport listen from 'test-listen'  //  Testing microservices with micro\r\nimport request from 'request-promise'  //  http request using promises\r\nimport pictures from '../pictures.js'\r\nimport fixtures from './fixtures'\r\n\r\n  //  testing micro: 'GET /_id' --> ruta para obtener imagen por id\r\ntest('GET /:id', async t => {\r\n  let image = fixtures.getImage()\r\n  //  micro launches the server\r\n  let srv = micro(pictures)\r\n  //  listen return url:port from server executed by micro-> line 13\r\n  let url = await listen(srv)\r\n  //  execute http request\r\n  let body = await request({uri: `${url}/${image.publicId}`, json: true})\r\n  t.deepEqual(body, image)\r\n})\r\n\r\n  //  test to to!!\r\ntest.todo('POST /')\r\ntest.todo('POST /:id/like')\r\n"]}