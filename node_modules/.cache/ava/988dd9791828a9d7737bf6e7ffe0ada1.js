'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _micro = require('micro');

var _micro2 = _interopRequireDefault(_micro);

var _testListen = require('test-listen');

var _testListen2 = _interopRequireDefault(_testListen);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _pictures = require('../pictures.js');

var _pictures2 = _interopRequireDefault(_pictures);

var _fixtures = require('./fixtures');

var _fixtures2 = _interopRequireDefault(_fixtures);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
//  import uuid from 'uuid-base62'
//  Testing microservices with micro
//  http request using promises


//  testing micro: 'GET /_id' --> ruta para obtener imagen por id
(0, _ava2.default)('GET /:id', (() => {
  var _ref = _asyncToGenerator(function* (t) {
    let image = _fixtures2.default.getImage();
    //  micro launches the server
    let srv = (0, _micro2.default)(_pictures2.default);
    //  listen return url:port from server executed by micro-> line 13
    let url = yield (0, _testListen2.default)(srv);
    //  execute http request
    let body = yield (0, _requestPromise2.default)({ uri: `${url}/${image.publicId}`, json: true });
    t.deepEqual(body, image);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());

//  test to to!!
_ava2.default.todo('POST /');
_ava2.default.todo('POST /:id/like');
//# sourceMappingURL=..\node_modules\.cache\ava\988dd9791828a9d7737bf6e7ffe0ada1.js.map