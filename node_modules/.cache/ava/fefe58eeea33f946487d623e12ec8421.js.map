{"version":3,"sources":["auth-test.js"],"names":["beforeEach","t","srv","context","url","user","getUser","options","method","uri","body","username","password","json","token","decoded","verifyToken","secret","is"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AANA;AACkC;AACK;;;AAMvC;AACA,cAAKA,UAAL;AAAA,+BAAgB,WAAMC,CAAN,EAAW;AACzB;AACA,QAAIC,MAAM,oCAAV;AACA;AACAD,MAAEE,OAAF,CAAUC,GAAV,GAAgB,MAAM,0BAAOF,GAAP,CAAtB;AACD,GALD;;AAAA;AAAA;AAAA;AAAA;AAMA;AACA,mBAAK,cAAL;AAAA,gCAAqB,WAAMD,CAAN,EAAW;AAC9B,QAAII,OAAO,mBAASC,OAAT,EAAX;AACA,QAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;AACA,QAAIG,UAAU;AACZC,cAAQ,MADI;AAEZC,WAAKL,GAFO;AAGZM,YAAM;AACJC,kBAAUN,KAAKM,QADX;AAEJC,kBAAUP,KAAKO;AAFX,OAHM;AAOZC,YAAM;AAPM,KAAd;;AAUA,QAAIC,QAAQ,MAAM,8BAAQP,OAAR,CAAlB;AACA,QAAIQ,UAAU,MAAM,gBAAMC,WAAN,CAAkBF,KAAlB,EAAyB,iBAAOG,MAAhC,CAApB;;AAEAhB,MAAEiB,EAAF,CAAKH,QAAQJ,QAAb,EAAuBN,KAAKM,QAA5B;AACD,GAjBD;;AAAA;AAAA;AAAA;AAAA","file":"auth-test.js","sourcesContent":["'use strict'\r\n\r\nimport test from 'ava'\r\nimport micro from 'micro'\r\n//  import uuid from 'uuid-base62'\r\nimport listen from 'test-listen'  //  Testing microservices with micro\r\nimport request from 'request-promise'  //  http request using promises\r\nimport auth from '../auth.js'\r\nimport fixtures from './fixtures'\r\nimport config from '../config'\r\nimport utils from '../lib/utils'\r\n\r\n//  launches microservice for each test\r\ntest.beforeEach(async t => {\r\n  //  micro launches the micro server\r\n  let srv = micro(auth)\r\n  //  listen return url:port from server executed by micro-> line 13\r\n  t.context.url = await listen(srv)\r\n})\r\n//  Test Post - autentication\r\ntest('success POST', async t => {\r\n  let user = fixtures.getUser()\r\n  let url = t.context.url\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    body: {\r\n      username: user.username,\r\n      password: user.password\r\n    },\r\n    json: true\r\n  }\r\n\r\n  let token = await request(options)\r\n  let decoded = await utils.verifyToken(token, config.secret)\r\n\r\n  t.is(decoded.username, user.username)\r\n})\r\n"]}